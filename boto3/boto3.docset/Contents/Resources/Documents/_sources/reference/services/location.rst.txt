

***************
LocationService
***************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: LocationService.Client

  A low-level client representing Amazon Location Service
  

  Suite of geospatial services including Maps, Places, Tracking, and Geofencing

  ::

    
    import boto3
    
    client = boto3.client('location')

  
  These are the available methods:
  
  *   :py:meth:`~LocationService.Client.associate_tracker_consumer`

  
  *   :py:meth:`~LocationService.Client.batch_delete_geofence`

  
  *   :py:meth:`~LocationService.Client.batch_evaluate_geofences`

  
  *   :py:meth:`~LocationService.Client.batch_get_device_position`

  
  *   :py:meth:`~LocationService.Client.batch_put_geofence`

  
  *   :py:meth:`~LocationService.Client.batch_update_device_position`

  
  *   :py:meth:`~LocationService.Client.can_paginate`

  
  *   :py:meth:`~LocationService.Client.create_geofence_collection`

  
  *   :py:meth:`~LocationService.Client.create_map`

  
  *   :py:meth:`~LocationService.Client.create_place_index`

  
  *   :py:meth:`~LocationService.Client.create_tracker`

  
  *   :py:meth:`~LocationService.Client.delete_geofence_collection`

  
  *   :py:meth:`~LocationService.Client.delete_map`

  
  *   :py:meth:`~LocationService.Client.delete_place_index`

  
  *   :py:meth:`~LocationService.Client.delete_tracker`

  
  *   :py:meth:`~LocationService.Client.describe_geofence_collection`

  
  *   :py:meth:`~LocationService.Client.describe_map`

  
  *   :py:meth:`~LocationService.Client.describe_place_index`

  
  *   :py:meth:`~LocationService.Client.describe_tracker`

  
  *   :py:meth:`~LocationService.Client.disassociate_tracker_consumer`

  
  *   :py:meth:`~LocationService.Client.generate_presigned_url`

  
  *   :py:meth:`~LocationService.Client.get_device_position`

  
  *   :py:meth:`~LocationService.Client.get_device_position_history`

  
  *   :py:meth:`~LocationService.Client.get_geofence`

  
  *   :py:meth:`~LocationService.Client.get_map_glyphs`

  
  *   :py:meth:`~LocationService.Client.get_map_sprites`

  
  *   :py:meth:`~LocationService.Client.get_map_style_descriptor`

  
  *   :py:meth:`~LocationService.Client.get_map_tile`

  
  *   :py:meth:`~LocationService.Client.get_paginator`

  
  *   :py:meth:`~LocationService.Client.get_waiter`

  
  *   :py:meth:`~LocationService.Client.list_geofence_collections`

  
  *   :py:meth:`~LocationService.Client.list_geofences`

  
  *   :py:meth:`~LocationService.Client.list_maps`

  
  *   :py:meth:`~LocationService.Client.list_place_indexes`

  
  *   :py:meth:`~LocationService.Client.list_tracker_consumers`

  
  *   :py:meth:`~LocationService.Client.list_trackers`

  
  *   :py:meth:`~LocationService.Client.put_geofence`

  
  *   :py:meth:`~LocationService.Client.search_place_index_for_position`

  
  *   :py:meth:`~LocationService.Client.search_place_index_for_text`

  

  .. py:method:: associate_tracker_consumer(**kwargs)

    

    Creates an association between a geofence collection and a tracker resource. This allows the tracker resource to communicate location data to the linked geofence collection.

     

    .. note::

       

      Currently not supported — Cross-account configurations, such as creating associations between a tracker resource in one account and a geofence collection in another account.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/AssociateTrackerConsumer>`_    


    **Request Syntax** 
    ::

      response = client.associate_tracker_consumer(
          ConsumerArn='string',
          TrackerName='string'
      )
    :type ConsumerArn: string
    :param ConsumerArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS. 

       

       
      * Format example: ``arn:partition:service:region:account-id:resource-type:resource-id``   
       

      

    
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The name of the tracker resource to be associated with a geofence collection.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.ConflictException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: batch_delete_geofence(**kwargs)

    

    Deletes a batch of geofences from a geofence collection.

     

    .. note::

       

      This action deletes the resource permanently. You can't undo this action.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/BatchDeleteGeofence>`_    


    **Request Syntax** 
    ::

      response = client.batch_delete_geofence(
          CollectionName='string',
          GeofenceIds=[
              'string',
          ]
      )
    :type CollectionName: string
    :param CollectionName: **[REQUIRED]** 

      The geofence collection storing the geofences to be deleted.

      

    
    :type GeofenceIds: list
    :param GeofenceIds: **[REQUIRED]** 

      The batch of geofences to be deleted.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Errors': [
                {
                    'Error': {
                        'Code': 'AccessDeniedError'|'ConflictError'|'InternalServerError'|'ResourceNotFoundError'|'ThrottlingError'|'ValidationError',
                        'Message': 'string'
                    },
                    'GeofenceId': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Errors** *(list) --* 

          Contains error details for each geofence that failed to delete.

          
          

          - *(dict) --* 

            Contains error details for each geofence that failed to delete from the geofence collection.

            
            

            - **Error** *(dict) --* 

              Contains details associated to the batch error.

              
              

              - **Code** *(string) --* 

                The error code associated with the batch request error.

                
              

              - **Message** *(string) --* 

                A message with the reason for the batch request error.

                
          
            

            - **GeofenceId** *(string) --* 

              The geofence associated with the error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: batch_evaluate_geofences(**kwargs)

    

    Evaluates device positions against the geofence geometries from a given geofence collection. The evaluation determines if the device has entered or exited a geofenced area, which publishes ENTER or EXIT geofence events to Amazon EventBridge.

     

    .. note::

       

      The last geofence that a device was observed within, if any, is tracked for 30 days after the most recent device position update

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/BatchEvaluateGeofences>`_    


    **Request Syntax** 
    ::

      response = client.batch_evaluate_geofences(
          CollectionName='string',
          DevicePositionUpdates=[
              {
                  'DeviceId': 'string',
                  'Position': [
                      123.0,
                  ],
                  'SampleTime': datetime(2015, 1, 1)
              },
          ]
      )
    :type CollectionName: string
    :param CollectionName: **[REQUIRED]** 

      The geofence collection used in evaluating the position of devices against its geofences.

      

    
    :type DevicePositionUpdates: list
    :param DevicePositionUpdates: **[REQUIRED]** 

      Contains device details for each device to be evaluated against the given geofence collection.

      

    
      - *(dict) --* 

        Contains the position update details for a device.

        

      
        - **DeviceId** *(string) --* **[REQUIRED]** 

          The device associated to the position update.

          

        
        - **Position** *(list) --* **[REQUIRED]** 

          The latest device position defined in `WGS 84 <https://earth-info.nga.mil/GandG/wgs84/index.html>`__ format: ``[X or longitude, Y or latitude]`` .

          

        
          - *(float) --* 

          
      
        - **SampleTime** *(datetime) --* **[REQUIRED]** 

          The timestamp at which the device's position was determined. Uses `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Errors': [
                {
                    'DeviceId': 'string',
                    'Error': {
                        'Code': 'AccessDeniedError'|'ConflictError'|'InternalServerError'|'ResourceNotFoundError'|'ThrottlingError'|'ValidationError',
                        'Message': 'string'
                    },
                    'SampleTime': datetime(2015, 1, 1)
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Errors** *(list) --* 

          Contains error details for each device that failed to evaluate its position against the given geofence collection.

          
          

          - *(dict) --* 

            Contains error details for each device that failed to evaluate its position against the geofences in a given geofence collection.

            
            

            - **DeviceId** *(string) --* 

              The device associated with the position evaluation error.

              
            

            - **Error** *(dict) --* 

              Contains details associated to the batch error.

              
              

              - **Code** *(string) --* 

                The error code associated with the batch request error.

                
              

              - **Message** *(string) --* 

                A message with the reason for the batch request error.

                
          
            

            - **SampleTime** *(datetime) --* 

              Specifies a timestamp for when the error occurred in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: batch_get_device_position(**kwargs)

    

    A batch request to retrieve all device positions.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/BatchGetDevicePosition>`_    


    **Request Syntax** 
    ::

      response = client.batch_get_device_position(
          DeviceIds=[
              'string',
          ],
          TrackerName='string'
      )
    :type DeviceIds: list
    :param DeviceIds: **[REQUIRED]** 

      Devices whose position you want to retrieve.

       

       
      * For example, for two devices: ``device-ids=DeviceId1&device-ids=DeviceId2``   
       

      

    
      - *(string) --* 

      
  
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The tracker resource retrieving the device position.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DevicePositions': [
                {
                    'DeviceId': 'string',
                    'Position': [
                        123.0,
                    ],
                    'ReceivedTime': datetime(2015, 1, 1),
                    'SampleTime': datetime(2015, 1, 1)
                },
            ],
            'Errors': [
                {
                    'DeviceId': 'string',
                    'Error': {
                        'Code': 'AccessDeniedError'|'ConflictError'|'InternalServerError'|'ResourceNotFoundError'|'ThrottlingError'|'ValidationError',
                        'Message': 'string'
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DevicePositions** *(list) --* 

          Contains device position details such as the device ID, position, and timestamps for when the position was received and sampled.

          
          

          - *(dict) --* 

            Contains the device position details.

            
            

            - **DeviceId** *(string) --* 

              The device whose position you retrieved.

              
            

            - **Position** *(list) --* 

              The last known device position.

              
              

              - *(float) --* 
          
            

            - **ReceivedTime** *(datetime) --* 

              The timestamp for when the tracker resource received the device position in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
            

            - **SampleTime** *(datetime) --* 

              The timestamp at which the device's position was determined. Uses `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
        
      
        

        - **Errors** *(list) --* 

          Contains error details for each device that failed to send its position to the tracker resource.

          
          

          - *(dict) --* 

            Contains error details for each device that didn't return a position.

            
            

            - **DeviceId** *(string) --* 

              The ID of the device that didn't return a position.

              
            

            - **Error** *(dict) --* 

              Contains details related to the error code.

              
              

              - **Code** *(string) --* 

                The error code associated with the batch request error.

                
              

              - **Message** *(string) --* 

                A message with the reason for the batch request error.

                
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: batch_put_geofence(**kwargs)

    

    A batch request for storing geofence geometries into a given geofence collection.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/BatchPutGeofence>`_    


    **Request Syntax** 
    ::

      response = client.batch_put_geofence(
          CollectionName='string',
          Entries=[
              {
                  'GeofenceId': 'string',
                  'Geometry': {
                      'Polygon': [
                          [
                              [
                                  123.0,
                              ],
                          ],
                      ]
                  }
              },
          ]
      )
    :type CollectionName: string
    :param CollectionName: **[REQUIRED]** 

      The geofence collection storing the geofences.

      

    
    :type Entries: list
    :param Entries: **[REQUIRED]** 

      The batch of geofences to be stored in a geofence collection.

      

    
      - *(dict) --* 

        Contains geofence geometry details. 

        

      
        - **GeofenceId** *(string) --* **[REQUIRED]** 

          The identifier for the geofence to be stored in a given geofence collection.

          

        
        - **Geometry** *(dict) --* **[REQUIRED]** 

          Contains the polygon details to specify the position of the geofence.

           

          .. note::

             

            Each `geofence polygon <https://docs.aws.amazon.com/location-geofences/latest/APIReference/API_GeofenceGeometry.html>`__ can have a maximum of 1,000 vertices.

             

          

        
          - **Polygon** *(list) --* 

            An array of 1 or more linear rings. A linear ring is an array of 4 or more vertices, where the first and last vertex are the same to form a closed boundary. Each vertex is a 2-dimensional point of the form: ``[longitude, latitude]`` . 

             

            The first linear ring is an outer ring, describing the polygon's boundary. Subsequent linear rings may be inner or outer rings to describe holes and islands. Outer rings must list their vertices in counter-clockwise order around the ring's center, where the left side is the polygon's exterior. Inner rings must list their vertices in clockwise order, where the left side is the polygon's interior.

            

          
            - *(list) --* 

            
              - *(list) --* 

              
                - *(float) --* 

                
            
          
        
        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Errors': [
                {
                    'Error': {
                        'Code': 'AccessDeniedError'|'ConflictError'|'InternalServerError'|'ResourceNotFoundError'|'ThrottlingError'|'ValidationError',
                        'Message': 'string'
                    },
                    'GeofenceId': 'string'
                },
            ],
            'Successes': [
                {
                    'CreateTime': datetime(2015, 1, 1),
                    'GeofenceId': 'string',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Errors** *(list) --* 

          Contains additional error details for each geofence that failed to be stored in a geofence collection.

          
          

          - *(dict) --* 

            Contains error details for each geofence that failed to be stored in a given geofence collection.

            
            

            - **Error** *(dict) --* 

              Contains details associated to the batch error.

              
              

              - **Code** *(string) --* 

                The error code associated with the batch request error.

                
              

              - **Message** *(string) --* 

                A message with the reason for the batch request error.

                
          
            

            - **GeofenceId** *(string) --* 

              The geofence associated with the error message.

              
        
      
        

        - **Successes** *(list) --* 

          Contains each geofence that was successfully stored in a geofence collection.

          
          

          - *(dict) --* 

            Contains a summary of each geofence that was successfully stored in a given geofence collection.

            
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the geofence was stored in a geofence collection in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
            

            - **GeofenceId** *(string) --* 

              The geofence successfully stored in a geofence collection.

              
            

            - **UpdateTime** *(datetime) --* 

              The timestamp for when the geofence was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: batch_update_device_position(**kwargs)

    

    Uploads position update data for one or more devices to a tracker resource. Amazon Location uses the data when reporting the last known device position and position history.

     

    .. note::

       

      Only one position update is stored per sample time. Location data is sampled at a fixed rate of one position per 30-second interval, and retained for one year before it is deleted.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/BatchUpdateDevicePosition>`_    


    **Request Syntax** 
    ::

      response = client.batch_update_device_position(
          TrackerName='string',
          Updates=[
              {
                  'DeviceId': 'string',
                  'Position': [
                      123.0,
                  ],
                  'SampleTime': datetime(2015, 1, 1)
              },
          ]
      )
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The name of the tracker resource to update.

      

    
    :type Updates: list
    :param Updates: **[REQUIRED]** 

      Contains the position update details for each device.

      

    
      - *(dict) --* 

        Contains the position update details for a device.

        

      
        - **DeviceId** *(string) --* **[REQUIRED]** 

          The device associated to the position update.

          

        
        - **Position** *(list) --* **[REQUIRED]** 

          The latest device position defined in `WGS 84 <https://earth-info.nga.mil/GandG/wgs84/index.html>`__ format: ``[X or longitude, Y or latitude]`` .

          

        
          - *(float) --* 

          
      
        - **SampleTime** *(datetime) --* **[REQUIRED]** 

          The timestamp at which the device's position was determined. Uses `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Errors': [
                {
                    'DeviceId': 'string',
                    'Error': {
                        'Code': 'AccessDeniedError'|'ConflictError'|'InternalServerError'|'ResourceNotFoundError'|'ThrottlingError'|'ValidationError',
                        'Message': 'string'
                    },
                    'SampleTime': datetime(2015, 1, 1)
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Errors** *(list) --* 

          Contains error details for each device that failed to update its position.

          
          

          - *(dict) --* 

            Contains error details for each device that failed to update its position.

            
            

            - **DeviceId** *(string) --* 

              The device associated with the failed location update.

              
            

            - **Error** *(dict) --* 

              Contains details related to the error code such as the error code and error message.

              
              

              - **Code** *(string) --* 

                The error code associated with the batch request error.

                
              

              - **Message** *(string) --* 

                A message with the reason for the batch request error.

                
          
            

            - **SampleTime** *(datetime) --* 

              The timestamp at which the device position was determined. Uses `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_geofence_collection(**kwargs)

    

    Creates a geofence collection, which manages and stores geofences.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/CreateGeofenceCollection>`_    


    **Request Syntax** 
    ::

      response = client.create_geofence_collection(
          CollectionName='string',
          Description='string',
          PricingPlan='RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
          PricingPlanDataSource='string'
      )
    :type CollectionName: string
    :param CollectionName: **[REQUIRED]** 

      A custom name for the geofence collection.

       

      Requirements:

       

       
      * Contain only alphanumeric characters (A–Z, a–z, 0-9), hyphens (-), periods (.), and underscores (_).  
       
      * Must be a unique geofence collection name. 
       
      * No spaces allowed. For example, ``ExampleGeofenceCollection`` . 
       

      

    
    :type Description: string
    :param Description: 

      An optional description for the geofence collection.

      

    
    :type PricingPlan: string
    :param PricingPlan: **[REQUIRED]** 

      Specifies the pricing plan for your geofence collection.

       

      For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

      

    
    :type PricingPlanDataSource: string
    :param PricingPlanDataSource: 

      Specifies the plan data source. Required if the Mobile Asset Tracking (MAT) or the Mobile Asset Management (MAM) pricing plan is selected.

       

      Billing is determined by the resource usage, the associated pricing plan, and the data source that was specified. For more information about each pricing plan option and restrictions, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

       

      Valid Values: ``Esri`` | ``Here``  

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CollectionArn': 'string',
            'CollectionName': 'string',
            'CreateTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CollectionArn** *(string) --* 

          The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS. 

          
        

        - **CollectionName** *(string) --* 

          The name for the geofence collection.

          
        

        - **CreateTime** *(datetime) --* 

          The timestamp for when the geofence collection was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ConflictException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_map(**kwargs)

    

    Creates a map resource in your AWS account, which provides map tiles of different styles sourced from global location data providers.

     

    .. note::

       

      By using Maps, you agree that AWS may transmit your API queries to your selected third party provider for processing, which may be outside the AWS region you are currently using. For more information, see the `AWS Service Terms <https://aws.amazon.com/service-terms/>`__ for Amazon Location Service. 

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/CreateMap>`_    


    **Request Syntax** 
    ::

      response = client.create_map(
          Configuration={
              'Style': 'string'
          },
          Description='string',
          MapName='string',
          PricingPlan='RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement'
      )
    :type Configuration: dict
    :param Configuration: **[REQUIRED]** 

      Specifies the map style selected from an available data provider.

      

    
      - **Style** *(string) --* **[REQUIRED]** 

        Specifies the map style selected from an available data provider.

         

        Valid styles: ``VectorEsriStreets`` , ``VectorEsriTopographic`` , ``VectorEsriNavigation`` , ``VectorEsriDarkGrayCanvas`` , ``VectorEsriLightGrayCanvas`` , ``VectorHereBerlin`` .

         

        .. note::

           

          When using HERE as your data provider, and selecting the Style ``VectorHereBerlin`` , you may not use HERE Maps for Asset Management. See the `AWS Service Terms <https://aws.amazon.com/service-terms/>`__ for Amazon Location Service. 

           

        

      
    
    :type Description: string
    :param Description: 

      An optional description for the map resource.

      

    
    :type MapName: string
    :param MapName: **[REQUIRED]** 

      The name for the map resource.

       

      Requirements:

       

       
      * Must contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_).  
       
      * Must be a unique map resource name.  
       
      * No spaces allowed. For example, ``ExampleMap`` . 
       

      

    
    :type PricingPlan: string
    :param PricingPlan: **[REQUIRED]** 

      Specifies the pricing plan for your map resource.

       

      For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CreateTime': datetime(2015, 1, 1),
            'MapArn': 'string',
            'MapName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CreateTime** *(datetime) --* 

          The timestamp for when the map resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` .

          
        

        - **MapArn** *(string) --* 

          The Amazon Resource Name (ARN) for the map resource. Used when you need to specify a resource across all AWS.

           

           
          * Format example: ``arn:partition:service:region:account-id:resource-type:resource-id``   
           

          
        

        - **MapName** *(string) --* 

          The name of the map resource.

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ConflictException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_place_index(**kwargs)

    

    Creates a Place index resource in your AWS account, which supports Places functions with geospatial data sourced from your chosen data provider.

     

    .. note::

       

      By using Places, you agree that AWS may transmit your API queries to your selected third party provider for processing, which may be outside the AWS region you are currently using. 

       

      Because of licensing limitations, you may not use HERE to store results for locations in Japan. For more information, see the `AWS Service Terms <https://aws.amazon.com/service-terms/>`__ for Amazon Location Service.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/CreatePlaceIndex>`_    


    **Request Syntax** 
    ::

      response = client.create_place_index(
          DataSource='string',
          DataSourceConfiguration={
              'IntendedUse': 'SingleUse'|'Storage'
          },
          Description='string',
          IndexName='string',
          PricingPlan='RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement'
      )
    :type DataSource: string
    :param DataSource: **[REQUIRED]** 

      Specifies the data provider of geospatial data.

       

      .. note::

         

        This field is case-sensitive. Enter the valid values as shown. For example, entering ``HERE`` will return an error.

         

       

      Valid values include:

       

       
      * ``Esri``   
       
      * ``Here``   
       

       

      For additional details on data providers, see the `Amazon Location Service data providers page <https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html>`__ .

      

    
    :type DataSourceConfiguration: dict
    :param DataSourceConfiguration: 

      Specifies the data storage option for requesting Places.

      

    
      - **IntendedUse** *(string) --* 

        Specifies how the results of an operation will be stored by the caller. 

         

        Valid values include:

         

         
        * ``SingleUse`` specifies that the results won't be stored.  
         
        * ``Storage`` specifies that the result can be cached or stored in a database. 
         

         

        Default value: ``SingleUse``  

        

      
    
    :type Description: string
    :param Description: 

      The optional description for the Place index resource.

      

    
    :type IndexName: string
    :param IndexName: **[REQUIRED]** 

      The name of the Place index resource. 

       

      Requirements:

       

       
      * Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_). 
       
      * Must be a unique Place index resource name. 
       
      * No spaces allowed. For example, ``ExamplePlaceIndex`` . 
       

      

    
    :type PricingPlan: string
    :param PricingPlan: **[REQUIRED]** 

      Specifies the pricing plan for your Place index resource.

       

      For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CreateTime': datetime(2015, 1, 1),
            'IndexArn': 'string',
            'IndexName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CreateTime** *(datetime) --* 

          The timestamp for when the Place index resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

          
        

        - **IndexArn** *(string) --* 

          The Amazon Resource Name (ARN) for the Place index resource. Used when you need to specify a resource across all AWS. 

          
        

        - **IndexName** *(string) --* 

          The name for the Place index resource.

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ConflictException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_tracker(**kwargs)

    

    Creates a tracker resource in your AWS account, which lets you retrieve current and historical location of devices.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/CreateTracker>`_    


    **Request Syntax** 
    ::

      response = client.create_tracker(
          Description='string',
          PricingPlan='RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
          PricingPlanDataSource='string',
          TrackerName='string'
      )
    :type Description: string
    :param Description: 

      An optional description for the tracker resource.

      

    
    :type PricingPlan: string
    :param PricingPlan: **[REQUIRED]** 

      Specifies the pricing plan for your tracker resource.

       

      For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

      

    
    :type PricingPlanDataSource: string
    :param PricingPlanDataSource: 

      Specifies the plan data source. Required if the Mobile Asset Tracking (MAT) or the Mobile Asset Management (MAM) pricing plan is selected.

       

      Billing is determined by the resource usage, the associated pricing plan, and data source that was specified. For more information about each pricing plan option and restrictions, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

       

      Valid Values: ``Esri`` | ``Here``  

      

    
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The name for the tracker resource.

       

      Requirements:

       

       
      * Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_). 
       
      * Must be a unique tracker resource name. 
       
      * No spaces allowed. For example, ``ExampleTracker`` . 
       

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CreateTime': datetime(2015, 1, 1),
            'TrackerArn': 'string',
            'TrackerName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CreateTime** *(datetime) --* 

          The timestamp for when the tracker resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

          
        

        - **TrackerArn** *(string) --* 

          The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS.

          
        

        - **TrackerName** *(string) --* 

          The name of the tracker resource.

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ConflictException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_geofence_collection(**kwargs)

    

    Deletes a geofence collection from your AWS account.

     

    .. note::

       

      This action deletes the resource permanently. You can't undo this action. If the geofence collection is the target of a tracker resource, the devices will no longer be monitored.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/DeleteGeofenceCollection>`_    


    **Request Syntax** 
    ::

      response = client.delete_geofence_collection(
          CollectionName='string'
      )
    :type CollectionName: string
    :param CollectionName: **[REQUIRED]** 

      The name of the geofence collection to be deleted.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_map(**kwargs)

    

    Deletes a map resource from your AWS account.

     

    .. note::

       

      This action deletes the resource permanently. You cannot undo this action. If the map is being used in an application, the map may not render.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/DeleteMap>`_    


    **Request Syntax** 
    ::

      response = client.delete_map(
          MapName='string'
      )
    :type MapName: string
    :param MapName: **[REQUIRED]** 

      The name of the map resource to be deleted.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_place_index(**kwargs)

    

    Deletes a Place index resource from your AWS account.

     

    .. note::

       

      This action deletes the resource permanently. You cannot undo this action.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/DeletePlaceIndex>`_    


    **Request Syntax** 
    ::

      response = client.delete_place_index(
          IndexName='string'
      )
    :type IndexName: string
    :param IndexName: **[REQUIRED]** 

      The name of the Place index resource to be deleted.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_tracker(**kwargs)

    

    Deletes a tracker resource from your AWS account.

     

    .. note::

       

      This action deletes the resource permanently. You can't undo this action. If the tracker resource is in use, you may encounter an error. Make sure that the target resource is not a dependency for your applications.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/DeleteTracker>`_    


    **Request Syntax** 
    ::

      response = client.delete_tracker(
          TrackerName='string'
      )
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The name of the tracker resource to be deleted.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_geofence_collection(**kwargs)

    

    Retrieves the geofence collection details.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/DescribeGeofenceCollection>`_    


    **Request Syntax** 
    ::

      response = client.describe_geofence_collection(
          CollectionName='string'
      )
    :type CollectionName: string
    :param CollectionName: **[REQUIRED]** 

      The name of the geofence collection.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CollectionArn': 'string',
            'CollectionName': 'string',
            'CreateTime': datetime(2015, 1, 1),
            'Description': 'string',
            'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
            'PricingPlanDataSource': 'string',
            'UpdateTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CollectionArn** *(string) --* 

          The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS. 

          
        

        - **CollectionName** *(string) --* 

          The name of the geofence collection.

          
        

        - **CreateTime** *(datetime) --* 

          The timestamp for when the geofence resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

          
        

        - **Description** *(string) --* 

          The optional description for the geofence collection.

          
        

        - **PricingPlan** *(string) --* 

          The pricing plan selected for the specified geofence collection.

           

          For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

          
        

        - **PricingPlanDataSource** *(string) --* 

          The data source selected for the geofence collection and associated pricing plan.

          
        

        - **UpdateTime** *(datetime) --* 

          The timestamp for when the geofence collection was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_map(**kwargs)

    

    Retrieves the map resource details.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/DescribeMap>`_    


    **Request Syntax** 
    ::

      response = client.describe_map(
          MapName='string'
      )
    :type MapName: string
    :param MapName: **[REQUIRED]** 

      The name of the map resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Configuration': {
                'Style': 'string'
            },
            'CreateTime': datetime(2015, 1, 1),
            'DataSource': 'string',
            'Description': 'string',
            'MapArn': 'string',
            'MapName': 'string',
            'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
            'UpdateTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Configuration** *(dict) --* 

          Specifies the map tile style selected from a partner data provider.

          
          

          - **Style** *(string) --* 

            Specifies the map style selected from an available data provider.

             

            Valid styles: ``VectorEsriStreets`` , ``VectorEsriTopographic`` , ``VectorEsriNavigation`` , ``VectorEsriDarkGrayCanvas`` , ``VectorEsriLightGrayCanvas`` , ``VectorHereBerlin`` .

             

            .. note::

               

              When using HERE as your data provider, and selecting the Style ``VectorHereBerlin`` , you may not use HERE Maps for Asset Management. See the `AWS Service Terms <https://aws.amazon.com/service-terms/>`__ for Amazon Location Service. 

               

            
      
        

        - **CreateTime** *(datetime) --* 

          The timestamp for when the map resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` .

          
        

        - **DataSource** *(string) --* 

          Specifies the data provider for the associated map tiles.

          
        

        - **Description** *(string) --* 

          The optional description for the map resource.

          
        

        - **MapArn** *(string) --* 

          The Amazon Resource Name (ARN) for the map resource. Used when you need to specify a resource across all AWS.

          
        

        - **MapName** *(string) --* 

          The map style selected from an available provider.

          
        

        - **PricingPlan** *(string) --* 

          The pricing plan selected for the specified map resource.

           ``<p>For additional details and restrictions on each pricing plan option, see the <a href="https://aws.amazon.com/location/pricing/">Amazon Location Service pricing page</a>.</p>`` 
        

        - **UpdateTime** *(datetime) --* 

          The timestamp for when the map resource was last update in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` .

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_place_index(**kwargs)

    

    Retrieves the Place index resource details.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/DescribePlaceIndex>`_    


    **Request Syntax** 
    ::

      response = client.describe_place_index(
          IndexName='string'
      )
    :type IndexName: string
    :param IndexName: **[REQUIRED]** 

      The name of the Place index resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CreateTime': datetime(2015, 1, 1),
            'DataSource': 'string',
            'DataSourceConfiguration': {
                'IntendedUse': 'SingleUse'|'Storage'
            },
            'Description': 'string',
            'IndexArn': 'string',
            'IndexName': 'string',
            'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
            'UpdateTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CreateTime** *(datetime) --* 

          The timestamp for when the Place index resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

          
        

        - **DataSource** *(string) --* 

          The data provider of geospatial data. Indicates one of the available providers:

           

           
          * ``Esri``   
           
          * ``Here``   
           

           

          For additional details on data providers, see the `Amazon Location Service data providers page <https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html>`__ .

          
        

        - **DataSourceConfiguration** *(dict) --* 

          The specified data storage option for requesting Places.

          
          

          - **IntendedUse** *(string) --* 

            Specifies how the results of an operation will be stored by the caller. 

             

            Valid values include:

             

             
            * ``SingleUse`` specifies that the results won't be stored.  
             
            * ``Storage`` specifies that the result can be cached or stored in a database. 
             

             

            Default value: ``SingleUse``  

            
      
        

        - **Description** *(string) --* 

          The optional description for the Place index resource.

          
        

        - **IndexArn** *(string) --* 

          The Amazon Resource Name (ARN) for the Place index resource. Used when you need to specify a resource across all AWS. 

          
        

        - **IndexName** *(string) --* 

          The name of the Place index resource being described.

          
        

        - **PricingPlan** *(string) --* 

          The pricing plan selected for the specified Place index resource.

           

          For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

          
        

        - **UpdateTime** *(datetime) --* 

          The timestamp for when the Place index resource was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_tracker(**kwargs)

    

    Retrieves the tracker resource details.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/DescribeTracker>`_    


    **Request Syntax** 
    ::

      response = client.describe_tracker(
          TrackerName='string'
      )
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The name of the tracker resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CreateTime': datetime(2015, 1, 1),
            'Description': 'string',
            'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
            'PricingPlanDataSource': 'string',
            'TrackerArn': 'string',
            'TrackerName': 'string',
            'UpdateTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CreateTime** *(datetime) --* 

          The timestamp for when the tracker resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

          
        

        - **Description** *(string) --* 

          The optional description for the tracker resource.

          
        

        - **PricingPlan** *(string) --* 

          The pricing plan selected for the specified tracker resource.

           

          For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

          
        

        - **PricingPlanDataSource** *(string) --* 

          The data source selected for the tracker resource and associated pricing plan.

          
        

        - **TrackerArn** *(string) --* 

          The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS.

          
        

        - **TrackerName** *(string) --* 

          The name of the tracker resource.

          
        

        - **UpdateTime** *(datetime) --* 

          The timestamp for when the tracker resource was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_tracker_consumer(**kwargs)

    

    Removes the association between a tracker resource and a geofence collection.

     

    .. note::

       

      Once you unlink a tracker resource from a geofence collection, the tracker positions will no longer be automatically evaluated against geofences.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/DisassociateTrackerConsumer>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_tracker_consumer(
          ConsumerArn='string',
          TrackerName='string'
      )
    :type ConsumerArn: string
    :param ConsumerArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the geofence collection to be disassociated from the tracker resource. Used when you need to specify a resource across all AWS. 

       

       
      * Format example: ``arn:partition:service:region:account-id:resource-type:resource-id``   
       

      

    
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The name of the tracker resource to be dissociated from the consumer.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_device_position(**kwargs)

    

    Retrieves a device's most recent position according to its sample time.

     

    .. note::

       

      Device positions are deleted after one year.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/GetDevicePosition>`_    


    **Request Syntax** 
    ::

      response = client.get_device_position(
          DeviceId='string',
          TrackerName='string'
      )
    :type DeviceId: string
    :param DeviceId: **[REQUIRED]** 

      The device whose position you want to retrieve.

      

    
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The tracker resource receiving the position update.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DeviceId': 'string',
            'Position': [
                123.0,
            ],
            'ReceivedTime': datetime(2015, 1, 1),
            'SampleTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DeviceId** *(string) --* 

          The device whose position you retrieved.

          
        

        - **Position** *(list) --* 

          The last known device position.

          
          

          - *(float) --* 
      
        

        - **ReceivedTime** *(datetime) --* 

          The timestamp for when the tracker resource received the device position in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

          
        

        - **SampleTime** *(datetime) --* 

          The timestamp at which the device's position was determined. Uses `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_device_position_history(**kwargs)

    

    Retrieves the device position history from a tracker resource within a specified range of time.

     

    .. note::

       

      Device positions are deleted after 1 year.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/GetDevicePositionHistory>`_    


    **Request Syntax** 
    ::

      response = client.get_device_position_history(
          DeviceId='string',
          EndTimeExclusive=datetime(2015, 1, 1),
          NextToken='string',
          StartTimeInclusive=datetime(2015, 1, 1),
          TrackerName='string'
      )
    :type DeviceId: string
    :param DeviceId: **[REQUIRED]** 

      The device whose position history you want to retrieve.

      

    
    :type EndTimeExclusive: datetime
    :param EndTimeExclusive: 

      Specify the end time for the position history in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . By default, the value will be the time that the request is made.

       

      Requirement:

       

       
      * The time specified for ``EndTimeExclusive`` must be after the time for ``StartTimeInclusive`` . 
       

      

    
    :type NextToken: string
    :param NextToken: 

      The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. 

       

      Default value: ``null``  

      

    
    :type StartTimeInclusive: datetime
    :param StartTimeInclusive: 

      Specify the start time for the position history in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . By default, the value will be 24 hours prior to the time that the request is made.

       

      Requirement:

       

       
      * The time specified for ``StartTimeInclusive`` must be before ``EndTimeExclusive`` . 
       

      

    
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The tracker resource receiving the request for the device position history.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DevicePositions': [
                {
                    'DeviceId': 'string',
                    'Position': [
                        123.0,
                    ],
                    'ReceivedTime': datetime(2015, 1, 1),
                    'SampleTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DevicePositions** *(list) --* 

          Contains the position history details for the requested device.

          
          

          - *(dict) --* 

            Contains the device position details.

            
            

            - **DeviceId** *(string) --* 

              The device whose position you retrieved.

              
            

            - **Position** *(list) --* 

              The last known device position.

              
              

              - *(float) --* 
          
            

            - **ReceivedTime** *(datetime) --* 

              The timestamp for when the tracker resource received the device position in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
            

            - **SampleTime** *(datetime) --* 

              The timestamp at which the device's position was determined. Uses `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
        
      
        

        - **NextToken** *(string) --* 

          A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. 

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_geofence(**kwargs)

    

    Retrieves the geofence details from a geofence collection.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/GetGeofence>`_    


    **Request Syntax** 
    ::

      response = client.get_geofence(
          CollectionName='string',
          GeofenceId='string'
      )
    :type CollectionName: string
    :param CollectionName: **[REQUIRED]** 

      The geofence collection storing the target geofence.

      

    
    :type GeofenceId: string
    :param GeofenceId: **[REQUIRED]** 

      The geofence you're retrieving details for.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CreateTime': datetime(2015, 1, 1),
            'GeofenceId': 'string',
            'Geometry': {
                'Polygon': [
                    [
                        [
                            123.0,
                        ],
                    ],
                ]
            },
            'Status': 'string',
            'UpdateTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CreateTime** *(datetime) --* 

          The timestamp for when the geofence collection was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

          
        

        - **GeofenceId** *(string) --* 

          The geofence identifier.

          
        

        - **Geometry** *(dict) --* 

          Contains the geofence geometry details describing a polygon.

          
          

          - **Polygon** *(list) --* 

            An array of 1 or more linear rings. A linear ring is an array of 4 or more vertices, where the first and last vertex are the same to form a closed boundary. Each vertex is a 2-dimensional point of the form: ``[longitude, latitude]`` . 

             

            The first linear ring is an outer ring, describing the polygon's boundary. Subsequent linear rings may be inner or outer rings to describe holes and islands. Outer rings must list their vertices in counter-clockwise order around the ring's center, where the left side is the polygon's exterior. Inner rings must list their vertices in clockwise order, where the left side is the polygon's interior.

            
            

            - *(list) --* 
              

              - *(list) --* 
                

                - *(float) --* 
            
          
        
      
        

        - **Status** *(string) --* 

          Identifies the state of the geofence. A geofence will hold one of the following states:

           

           
          * ``ACTIVE`` — The geofence has been indexed by the system.  
           
          * ``PENDING`` — The geofence is being processed by the system. 
           
          * ``FAILED`` — The geofence failed to be indexed by the system. 
           
          * ``DELETED`` — The geofence has been deleted from the system index. 
           
          * ``DELETING`` — The geofence is being deleted from the system index. 
           

          
        

        - **UpdateTime** *(datetime) --* 

          The timestamp for when the geofence collection was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_map_glyphs(**kwargs)

    

    Retrieves glyphs used to display labels on a map.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/GetMapGlyphs>`_    


    **Request Syntax** 
    ::

      response = client.get_map_glyphs(
          FontStack='string',
          FontUnicodeRange='string',
          MapName='string'
      )
    :type FontStack: string
    :param FontStack: **[REQUIRED]** 

      A comma-separated list of fonts to load glyphs from in order of preference.. For example, ``Noto Sans, Arial Unicode`` .

      

    
    :type FontUnicodeRange: string
    :param FontUnicodeRange: **[REQUIRED]** 

      A Unicode range of characters to download glyphs for. Each response will contain 256 characters. For example, 0-255 includes all characters from range ``U+0000`` to ``00FF`` . Must be aligned to multiples of 256.

      

    
    :type MapName: string
    :param MapName: **[REQUIRED]** 

      The map resource associated with the glyph ﬁle.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Blob': StreamingBody(),
            'ContentType': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Blob** (:class:`.StreamingBody`) -- 

          The blob's content type.

          
        

        - **ContentType** *(string) --* 

          The map glyph content type. For example, ``application/octet-stream`` .

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_map_sprites(**kwargs)

    

    Retrieves the sprite sheet corresponding to a map resource. The sprite sheet is a PNG image paired with a JSON document describing the offsets of individual icons that will be displayed on a rendered map.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/GetMapSprites>`_    


    **Request Syntax** 
    ::

      response = client.get_map_sprites(
          FileName='string',
          MapName='string'
      )
    :type FileName: string
    :param FileName: **[REQUIRED]** 

      The name of the sprite ﬁle. Use the following ﬁle names for the sprite sheet:

       

       
      * ``sprites.png``   
       
      * ``sprites@2x.png`` for high pixel density displays 
       

       

      For the JSON document contain image offsets. Use the following ﬁle names:

       

       
      * ``sprites.json``   
       
      * ``sprites@2x.json`` for high pixel density displays 
       

      

    
    :type MapName: string
    :param MapName: **[REQUIRED]** 

      The map resource associated with the sprite ﬁle.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Blob': StreamingBody(),
            'ContentType': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Blob** (:class:`.StreamingBody`) -- 

          Contains the body of the sprite sheet or JSON offset ﬁle.

          
        

        - **ContentType** *(string) --* 

          The content type of the sprite sheet and offsets. For example, the sprite sheet content type is ``image/png`` , and the sprite offset JSON document is ``application/json`` . 

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_map_style_descriptor(**kwargs)

    

    Retrieves the map style descriptor from a map resource. 

     

    The style descriptor contains speciﬁcations on how features render on a map. For example, what data to display, what order to display the data in, and the style for the data. Style descriptors follow the Mapbox Style Specification.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/GetMapStyleDescriptor>`_    


    **Request Syntax** 
    ::

      response = client.get_map_style_descriptor(
          MapName='string'
      )
    :type MapName: string
    :param MapName: **[REQUIRED]** 

      The map resource to retrieve the style descriptor from.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Blob': StreamingBody(),
            'ContentType': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Blob** (:class:`.StreamingBody`) -- 

          Contains the body of the style descriptor.

          
        

        - **ContentType** *(string) --* 

          The style descriptor's content type. For example, ``application/json`` .

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_map_tile(**kwargs)

    

    Retrieves a vector data tile from the map resource. Map tiles are used by clients to render a map. They are addressed using a grid arrangement with an X coordinate, Y coordinate, and Z (zoom) level. 

     

    The origin (0, 0) is the top left of the map. Increasing the zoom level by 1 doubles both the X and Y dimensions, so a tile containing data for the entire world at (0/0/0) will be split into 4 tiles at zoom 1 (1/0/0, 1/0/1, 1/1/0, 1/1/1).

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/GetMapTile>`_    


    **Request Syntax** 
    ::

      response = client.get_map_tile(
          MapName='string',
          X='string',
          Y='string',
          Z='string'
      )
    :type MapName: string
    :param MapName: **[REQUIRED]** 

      The map resource to retrieve the map tiles from.

      

    
    :type X: string
    :param X: **[REQUIRED]** 

      The X axis value for the map tile.

      

    
    :type Y: string
    :param Y: **[REQUIRED]** 

      The Y axis value for the map tile. 

      

    
    :type Z: string
    :param Z: **[REQUIRED]** 

      The zoom value for the map tile.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Blob': StreamingBody(),
            'ContentType': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Blob** (:class:`.StreamingBody`) -- 

          Contains Mapbox Vector Tile (MVT) data.

          
        

        - **ContentType** *(string) --* 

          The map tile's content type. For example, ``application/vnd.mapbox-vector-tile`` .

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_geofence_collections(**kwargs)

    

    Lists geofence collections in your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListGeofenceCollections>`_    


    **Request Syntax** 
    ::

      response = client.list_geofence_collections(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      An optional limit for the number of resources returned in a single call. 

       

      Default value: ``100``  

      

    
    :type NextToken: string
    :param NextToken: 

      The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. 

       

      Default value: ``null``  

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Entries': [
                {
                    'CollectionName': 'string',
                    'CreateTime': datetime(2015, 1, 1),
                    'Description': 'string',
                    'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
                    'PricingPlanDataSource': 'string',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Entries** *(list) --* 

          Lists the geofence collections that exist in your AWS account.

          
          

          - *(dict) --* 

            Contains the geofence collection details.

            
            

            - **CollectionName** *(string) --* 

              The name of the geofence collection.

              
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the geofence collection was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
            

            - **Description** *(string) --* 

              The description for the geofence collection

              
            

            - **PricingPlan** *(string) --* 

              The pricing plan for the specified geofence collection.

               

              For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

              
            

            - **PricingPlanDataSource** *(string) --* 

              The data source selected for the geofence collection and associated pricing plan.

              
            

            - **UpdateTime** *(datetime) --* 

              Specifies a timestamp for when the resource was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
        
      
        

        - **NextToken** *(string) --* 

          A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. 

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_geofences(**kwargs)

    

    Lists geofences stored in a given geofence collection.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListGeofences>`_    


    **Request Syntax** 
    ::

      response = client.list_geofences(
          CollectionName='string',
          NextToken='string'
      )
    :type CollectionName: string
    :param CollectionName: **[REQUIRED]** 

      The name of the geofence collection storing the list of geofences.

      

    
    :type NextToken: string
    :param NextToken: 

      The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. 

       

      Default value: ``null``  

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Entries': [
                {
                    'CreateTime': datetime(2015, 1, 1),
                    'GeofenceId': 'string',
                    'Geometry': {
                        'Polygon': [
                            [
                                [
                                    123.0,
                                ],
                            ],
                        ]
                    },
                    'Status': 'string',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Entries** *(list) --* 

          Contains a list of geofences stored in the geofence collection.

          
          

          - *(dict) --* 

            Contains a list of geofences stored in a given geofence collection.

            
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the geofence was stored in a geofence collection in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
            

            - **GeofenceId** *(string) --* 

              The geofence identifier.

              
            

            - **Geometry** *(dict) --* 

              Contains the geofence geometry details describing a polygon.

              
              

              - **Polygon** *(list) --* 

                An array of 1 or more linear rings. A linear ring is an array of 4 or more vertices, where the first and last vertex are the same to form a closed boundary. Each vertex is a 2-dimensional point of the form: ``[longitude, latitude]`` . 

                 

                The first linear ring is an outer ring, describing the polygon's boundary. Subsequent linear rings may be inner or outer rings to describe holes and islands. Outer rings must list their vertices in counter-clockwise order around the ring's center, where the left side is the polygon's exterior. Inner rings must list their vertices in clockwise order, where the left side is the polygon's interior.

                
                

                - *(list) --* 
                  

                  - *(list) --* 
                    

                    - *(float) --* 
                
              
            
          
            

            - **Status** *(string) --* 

              Identifies the state of the geofence. A geofence will hold one of the following states:

               

               
              * ``ACTIVE`` — The geofence has been indexed by the system.  
               
              * ``PENDING`` — The geofence is being processed by the system. 
               
              * ``FAILED`` — The geofence failed to be indexed by the system. 
               
              * ``DELETED`` — The geofence has been deleted from the system index. 
               
              * ``DELETING`` — The geofence is being deleted from the system index. 
               

              
            

            - **UpdateTime** *(datetime) --* 

              The timestamp for when the geofence was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
        
      
        

        - **NextToken** *(string) --* 

          A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. 

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_maps(**kwargs)

    

    Lists map resources in your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListMaps>`_    


    **Request Syntax** 
    ::

      response = client.list_maps(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      An optional limit for the number of resources returned in a single call. 

       

      Default value: ``100``  

      

    
    :type NextToken: string
    :param NextToken: 

      The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.

       

      Default value: ``null``  

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Entries': [
                {
                    'CreateTime': datetime(2015, 1, 1),
                    'DataSource': 'string',
                    'Description': 'string',
                    'MapName': 'string',
                    'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Entries** *(list) --* 

          Contains a list of maps in your AWS account

          
          

          - *(dict) --* 

            Contains details of an existing map resource in your AWS account.

            
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the map resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` .

              
            

            - **DataSource** *(string) --* 

              Specifies the data provider for the associated map tiles.

              
            

            - **Description** *(string) --* 

              The description for the map resource.

              
            

            - **MapName** *(string) --* 

              The name of the associated map resource.

              
            

            - **PricingPlan** *(string) --* 

              The pricing plan for the specified map resource.

               

              For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

              
            

            - **UpdateTime** *(datetime) --* 

              The timestamp for when the map resource was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` .

              
        
      
        

        - **NextToken** *(string) --* 

          A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. 

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_place_indexes(**kwargs)

    

    Lists Place index resources in your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListPlaceIndexes>`_    


    **Request Syntax** 
    ::

      response = client.list_place_indexes(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      An optional limit for the maximum number of results returned in a single call.

       

      Default value: ``100``  

      

    
    :type NextToken: string
    :param NextToken: 

      The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page.

       

      Default value: ``null``  

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Entries': [
                {
                    'CreateTime': datetime(2015, 1, 1),
                    'DataSource': 'string',
                    'Description': 'string',
                    'IndexName': 'string',
                    'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Entries** *(list) --* 

          Lists the Place index resources that exist in your AWS account

          
          

          - *(dict) --* 

            A Place index resource listed in your AWS account.

            
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the Place index resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
            

            - **DataSource** *(string) --* 

              The data provider of geospatial data. Indicates one of the available providers:

               

               
              * Esri 
               
              * HERE 
               

               

              For additional details on data providers, see the `Amazon Location Service data providers page <https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html>`__ .

              
            

            - **Description** *(string) --* 

              The optional description for the Place index resource.

              
            

            - **IndexName** *(string) --* 

              The name of the Place index resource.

              
            

            - **PricingPlan** *(string) --* 

              The pricing plan for the specified Place index resource.

               

              For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

              
            

            - **UpdateTime** *(datetime) --* 

              The timestamp for when the Place index resource was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
        
      
        

        - **NextToken** *(string) --* 

          A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_tracker_consumers(**kwargs)

    

    Lists geofence collections currently associated to the given tracker resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListTrackerConsumers>`_    


    **Request Syntax** 
    ::

      response = client.list_tracker_consumers(
          MaxResults=123,
          NextToken='string',
          TrackerName='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      An optional limit for the number of resources returned in a single call. 

       

      Default value: ``100``  

      

    
    :type NextToken: string
    :param NextToken: 

      The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. 

       

      Default value: ``null``  

      

    
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The tracker resource whose associated geofence collections you want to list.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ConsumerArns': [
                'string',
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ConsumerArns** *(list) --* 

          Contains the list of geofence collection ARNs associated to the tracker resource.

          
          

          - *(string) --* 
      
        

        - **NextToken** *(string) --* 

          A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. 

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_trackers(**kwargs)

    

    Lists tracker resources in your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListTrackers>`_    


    **Request Syntax** 
    ::

      response = client.list_trackers(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      An optional limit for the number of resources returned in a single call. 

       

      Default value: ``100``  

      

    
    :type NextToken: string
    :param NextToken: 

      The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. 

       

      Default value: ``null``  

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Entries': [
                {
                    'CreateTime': datetime(2015, 1, 1),
                    'Description': 'string',
                    'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
                    'PricingPlanDataSource': 'string',
                    'TrackerName': 'string',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Entries** *(list) --* 

          Contains tracker resources in your AWS account. Details include tracker name, description and timestamps for when the tracker was created and last updated.

          
          

          - *(dict) --* 

            Contains the tracker resource details.

            
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the tracker resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
            

            - **Description** *(string) --* 

              The description for the tracker resource.

              
            

            - **PricingPlan** *(string) --* 

              The pricing plan for the specified tracker resource.

               

              For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

              
            

            - **PricingPlanDataSource** *(string) --* 

              The data source selected for the tracker resource and associated pricing plan.

              
            

            - **TrackerName** *(string) --* 

              The name of the tracker resource.

              
            

            - **UpdateTime** *(datetime) --* 

              The timestamp at which the device's position was determined. Uses `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
        
      
        

        - **NextToken** *(string) --* 

          A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. 

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: put_geofence(**kwargs)

    

    Stores a geofence geometry in a given geofence collection, or updates the geometry of an existing geofence if a geofence ID is included in the request. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/PutGeofence>`_    


    **Request Syntax** 
    ::

      response = client.put_geofence(
          CollectionName='string',
          GeofenceId='string',
          Geometry={
              'Polygon': [
                  [
                      [
                          123.0,
                      ],
                  ],
              ]
          }
      )
    :type CollectionName: string
    :param CollectionName: **[REQUIRED]** 

      The geofence collection to store the geofence in.

      

    
    :type GeofenceId: string
    :param GeofenceId: **[REQUIRED]** 

      An identifier for the geofence. For example, ``ExampleGeofence-1`` .

      

    
    :type Geometry: dict
    :param Geometry: **[REQUIRED]** 

      Contains the polygon details to specify the position of the geofence.

       

      .. note::

         

        Each `geofence polygon <https://docs.aws.amazon.com/location-geofences/latest/APIReference/API_GeofenceGeometry.html>`__ can have a maximum of 1,000 vertices.

         

      

    
      - **Polygon** *(list) --* 

        An array of 1 or more linear rings. A linear ring is an array of 4 or more vertices, where the first and last vertex are the same to form a closed boundary. Each vertex is a 2-dimensional point of the form: ``[longitude, latitude]`` . 

         

        The first linear ring is an outer ring, describing the polygon's boundary. Subsequent linear rings may be inner or outer rings to describe holes and islands. Outer rings must list their vertices in counter-clockwise order around the ring's center, where the left side is the polygon's exterior. Inner rings must list their vertices in clockwise order, where the left side is the polygon's interior.

        

      
        - *(list) --* 

        
          - *(list) --* 

          
            - *(float) --* 

            
        
      
    
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CreateTime': datetime(2015, 1, 1),
            'GeofenceId': 'string',
            'UpdateTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CreateTime** *(datetime) --* 

          The timestamp for when the geofence was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

          
        

        - **GeofenceId** *(string) --* 

          The geofence identifier entered in the request.

          
        

        - **UpdateTime** *(datetime) --* 

          The timestamp for when the geofence was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

          
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.ConflictException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: search_place_index_for_position(**kwargs)

    

    Reverse geocodes a given coordinate and returns a legible address. Allows you to search for Places or points of interest near a given position.

     

    .. note::

       

      By using Places, you agree that AWS may transmit your API queries to your selected third party provider for processing, which may be outside the AWS region you are currently using. 

       

      Because of licensing limitations, you may not use HERE to store results for locations in Japan. For more information, see the `AWS Service Terms <https://aws.amazon.com/service-terms/>`__ for Amazon Location Service.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/SearchPlaceIndexForPosition>`_    


    **Request Syntax** 
    ::

      response = client.search_place_index_for_position(
          IndexName='string',
          MaxResults=123,
          Position=[
              123.0,
          ]
      )
    :type IndexName: string
    :param IndexName: **[REQUIRED]** 

      The name of the Place index resource you want to use for the search.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      An optional paramer. The maximum number of results returned per request. 

       

      Default value: ``50``  

      

    
    :type Position: list
    :param Position: **[REQUIRED]** 

      Specifies a coordinate for the query defined by a longitude, and latitude.

       

       
      * The first position is the X coordinate, or longitude. 
       
      * The second position is the Y coordinate, or latitude.  
       

       

      For example, ``position=xLongitude&position=yLatitude`` .

      

    
      - *(float) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Results': [
                {
                    'Place': {
                        'AddressNumber': 'string',
                        'Country': 'string',
                        'Geometry': {
                            'Point': [
                                123.0,
                            ]
                        },
                        'Label': 'string',
                        'Municipality': 'string',
                        'Neighborhood': 'string',
                        'PostalCode': 'string',
                        'Region': 'string',
                        'Street': 'string',
                        'SubRegion': 'string'
                    }
                },
            ],
            'Summary': {
                'DataSource': 'string',
                'MaxResults': 123,
                'Position': [
                    123.0,
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Results** *(list) --* 

          Returns a list of Places closest to the specified position. Each result contains additional information about the Places returned.

          
          

          - *(dict) --* 

            Specifies a single point of interest, or Place as a result of a search query obtained from a dataset configured in the Place index Resource.

            
            

            - **Place** *(dict) --* 

              Contains details about the relevant point of interest.

              
              

              - **AddressNumber** *(string) --* 

                The numerical portion of an address, such as a building number. 

                
              

              - **Country** *(string) --* 

                A country/region specified using `ISO 3166 <https://www.iso.org/iso-3166-country-codes.html>`__ 3-digit country/region code. For example, ``CAN`` .

                
              

              - **Geometry** *(dict) --* 

                Places uses a point geometry to specify a location or a Place.

                
                

                - **Point** *(list) --* 

                  A single point geometry specifies a location for a Place using `WGS 84 <https://gisgeography.com/wgs84-world-geodetic-system/>`__ coordinates:

                   

                   
                  * *x* — Specifies the x coordinate or longitude.  
                   
                  * *y* — Specifies the y coordinate or latitude.  
                   

                  
                  

                  - *(float) --* 
              
            
              

              - **Label** *(string) --* 

                The full name and address of the point of interest such as a city, region, or country. For example, ``123 Any Street, Any Town, USA`` .

                
              

              - **Municipality** *(string) --* 

                A name for a local area, such as a city or town name. For example, ``Toronto`` .

                
              

              - **Neighborhood** *(string) --* 

                The name of a community district. For example, ``Downtown`` .

                
              

              - **PostalCode** *(string) --* 

                A group of numbers and letters in a country-specific format, which accompanies the address for the purpose of identifying a location. 

                
              

              - **Region** *(string) --* 

                A name for an area or geographical division, such as a province or state name. For example, ``British Columbia`` .

                
              

              - **Street** *(string) --* 

                The name for a street or a road to identify a location. For example, ``Main Street`` .

                
              

              - **SubRegion** *(string) --* 

                A country, or an area that's part of a larger region . For example, ``Metro Vancouver`` .

                
          
        
      
        

        - **Summary** *(dict) --* 

          Contains a summary of the request.

          
          

          - **DataSource** *(string) --* 

            The data provider of geospatial data. Indicates one of the available providers:

             

             
            * Esri 
             
            * HERE 
             

             

            For additional details on data providers, see the `Amazon Location Service data providers page <https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html>`__ .

            
          

          - **MaxResults** *(integer) --* 

            An optional parameter. The maximum number of results returned per request. 

             

            Default value: ``50``  

            
          

          - **Position** *(list) --* 

            The position given in the reverse geocoding request.

            
            

            - *(float) --* 
        
      
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

  .. py:method:: search_place_index_for_text(**kwargs)

    

    Geocodes free-form text, such as an address, name, city, or region to allow you to search for Places or points of interest. 

     

    Includes the option to apply additional parameters to narrow your list of results.

     

    .. note::

       

      You can search for places near a given position using ``BiasPosition`` , or filter results within a bounding box using ``FilterBBox`` . Providing both parameters simultaneously returns an error.

       

     

    .. note::

       

      By using Places, you agree that AWS may transmit your API queries to your selected third party provider for processing, which may be outside the AWS region you are currently using. 

       

      Also, when using HERE as your data provider, you may not (a) use HERE Places for Asset Management, or (b) select the ``Storage`` option for the ``IntendedUse`` parameter when requesting Places in Japan. For more information, see the `AWS Service Terms <https://aws.amazon.com/service-terms/>`__ for Amazon Location Service.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/SearchPlaceIndexForText>`_    


    **Request Syntax** 
    ::

      response = client.search_place_index_for_text(
          BiasPosition=[
              123.0,
          ],
          FilterBBox=[
              123.0,
          ],
          FilterCountries=[
              'string',
          ],
          IndexName='string',
          MaxResults=123,
          Text='string'
      )
    :type BiasPosition: list
    :param BiasPosition: 

      Searches for results closest to the given position. An optional parameter defined by longitude, and latitude.

       

       
      * The first ``bias`` position is the X coordinate, or longitude. 
       
      * The second ``bias`` position is the Y coordinate, or latitude.  
       

       

      For example, ``bias=xLongitude&bias=yLatitude`` .

      

    
      - *(float) --* 

      
  
    :type FilterBBox: list
    :param FilterBBox: 

      Filters the results by returning only Places within the provided bounding box. An optional parameter.

       

      The first 2 ``bbox`` parameters describe the lower southwest corner:

       

       
      * The first ``bbox`` position is the X coordinate or longitude of the lower southwest corner. 
       
      * The second ``bbox`` position is the Y coordinate or latitude of the lower southwest corner. 
       

       

      For example, ``bbox=xLongitudeSW&bbox=yLatitudeSW`` .

       

      The next ``bbox`` parameters describe the upper northeast corner:

       

       
      * The third ``bbox`` position is the X coordinate, or longitude of the upper northeast corner. 
       
      * The fourth ``bbox`` position is the Y coordinate, or longitude of the upper northeast corner. 
       

       

      For example, ``bbox=xLongitudeNE&bbox=yLatitudeNE``  

      

    
      - *(float) --* 

      
  
    :type FilterCountries: list
    :param FilterCountries: 

      Limits the search to the given a list of countries/regions. An optional parameter.

       

       
      * Use the `ISO 3166 <https://www.iso.org/iso-3166-country-codes.html>`__ 3-digit country code. For example, Australia uses three upper-case characters: ``AUS`` . 
       

      

    
      - *(string) --* 

      
  
    :type IndexName: string
    :param IndexName: **[REQUIRED]** 

      The name of the Place index resource you want to use for the search.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      An optional parameter. The maximum number of results returned per request. 

       

      The default: ``50``  

      

    
    :type Text: string
    :param Text: **[REQUIRED]** 

      The address, name, city, or region to be used in the search. In free-form text format. For example, ``123 Any Street`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Results': [
                {
                    'Place': {
                        'AddressNumber': 'string',
                        'Country': 'string',
                        'Geometry': {
                            'Point': [
                                123.0,
                            ]
                        },
                        'Label': 'string',
                        'Municipality': 'string',
                        'Neighborhood': 'string',
                        'PostalCode': 'string',
                        'Region': 'string',
                        'Street': 'string',
                        'SubRegion': 'string'
                    }
                },
            ],
            'Summary': {
                'BiasPosition': [
                    123.0,
                ],
                'DataSource': 'string',
                'FilterBBox': [
                    123.0,
                ],
                'FilterCountries': [
                    'string',
                ],
                'MaxResults': 123,
                'ResultBBox': [
                    123.0,
                ],
                'Text': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Results** *(list) --* 

          A list of Places closest to the specified position. Each result contains additional information about the specific point of interest. 

          
          

          - *(dict) --* 

            Contains relevant Places returned by calling ``SearchPlaceIndexForText`` .

            
            

            - **Place** *(dict) --* 

              Contains details about the relevant point of interest.

              
              

              - **AddressNumber** *(string) --* 

                The numerical portion of an address, such as a building number. 

                
              

              - **Country** *(string) --* 

                A country/region specified using `ISO 3166 <https://www.iso.org/iso-3166-country-codes.html>`__ 3-digit country/region code. For example, ``CAN`` .

                
              

              - **Geometry** *(dict) --* 

                Places uses a point geometry to specify a location or a Place.

                
                

                - **Point** *(list) --* 

                  A single point geometry specifies a location for a Place using `WGS 84 <https://gisgeography.com/wgs84-world-geodetic-system/>`__ coordinates:

                   

                   
                  * *x* — Specifies the x coordinate or longitude.  
                   
                  * *y* — Specifies the y coordinate or latitude.  
                   

                  
                  

                  - *(float) --* 
              
            
              

              - **Label** *(string) --* 

                The full name and address of the point of interest such as a city, region, or country. For example, ``123 Any Street, Any Town, USA`` .

                
              

              - **Municipality** *(string) --* 

                A name for a local area, such as a city or town name. For example, ``Toronto`` .

                
              

              - **Neighborhood** *(string) --* 

                The name of a community district. For example, ``Downtown`` .

                
              

              - **PostalCode** *(string) --* 

                A group of numbers and letters in a country-specific format, which accompanies the address for the purpose of identifying a location. 

                
              

              - **Region** *(string) --* 

                A name for an area or geographical division, such as a province or state name. For example, ``British Columbia`` .

                
              

              - **Street** *(string) --* 

                The name for a street or a road to identify a location. For example, ``Main Street`` .

                
              

              - **SubRegion** *(string) --* 

                A country, or an area that's part of a larger region . For example, ``Metro Vancouver`` .

                
          
        
      
        

        - **Summary** *(dict) --* 

          Contains a summary of the request. Contains the ``BiasPosition`` , ``DataSource`` , ``FilterBBox`` , ``FilterCountries`` , ``MaxResults`` , ``ResultBBox`` , and ``Text`` .

          
          

          - **BiasPosition** *(list) --* 

            Contains the coordinates for the bias position entered in the geocoding request.

            
            

            - *(float) --* 
        
          

          - **DataSource** *(string) --* 

            The data provider of geospatial data. Indicates one of the available providers:

             

             
            * Esri 
             
            * HERE 
             

             

            For additional details on data providers, see the `Amazon Location Service data providers page <https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html>`__ .

            
          

          - **FilterBBox** *(list) --* 

            Contains the coordinates for the optional bounding box coordinated entered in the geocoding request.

            
            

            - *(float) --* 
        
          

          - **FilterCountries** *(list) --* 

            Contains the country filter entered in the geocoding request.

            
            

            - *(string) --* 
        
          

          - **MaxResults** *(integer) --* 

            Contains the maximum number of results indicated for the request.

            
          

          - **ResultBBox** *(list) --* 

            A bounding box that contains the search results within the specified area indicated by ``FilterBBox`` . A subset of bounding box specified using ``FilterBBox`` .

            
            

            - *(float) --* 
        
          

          - **Text** *(string) --* 

            The address, name, city or region to be used in the geocoding request. In free-form text format. For example, ``Vancouver`` .

            
      
    
    **Exceptions** 
    
    *     :py:class:`LocationService.Client.exceptions.InternalServerException`

    
    *     :py:class:`LocationService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LocationService.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LocationService.Client.exceptions.ValidationException`

    
    *     :py:class:`LocationService.Client.exceptions.ThrottlingException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`LocationService.Paginator.GetDevicePositionHistory`


* :py:class:`LocationService.Paginator.ListGeofenceCollections`


* :py:class:`LocationService.Paginator.ListGeofences`


* :py:class:`LocationService.Paginator.ListMaps`


* :py:class:`LocationService.Paginator.ListPlaceIndexes`


* :py:class:`LocationService.Paginator.ListTrackerConsumers`


* :py:class:`LocationService.Paginator.ListTrackers`



.. py:class:: LocationService.Paginator.GetDevicePositionHistory

  ::

    
    paginator = client.get_paginator('get_device_position_history')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LocationService.Client.get_device_position_history`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/GetDevicePositionHistory>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          DeviceId='string',
          EndTimeExclusive=datetime(2015, 1, 1),
          StartTimeInclusive=datetime(2015, 1, 1),
          TrackerName='string',
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type DeviceId: string
    :param DeviceId: **[REQUIRED]** 

      The device whose position history you want to retrieve.

      

    
    :type EndTimeExclusive: datetime
    :param EndTimeExclusive: 

      Specify the end time for the position history in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . By default, the value will be the time that the request is made.

       

      Requirement:

       

       
      * The time specified for ``EndTimeExclusive`` must be after the time for ``StartTimeInclusive`` . 
       

      

    
    :type StartTimeInclusive: datetime
    :param StartTimeInclusive: 

      Specify the start time for the position history in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . By default, the value will be 24 hours prior to the time that the request is made.

       

      Requirement:

       

       
      * The time specified for ``StartTimeInclusive`` must be before ``EndTimeExclusive`` . 
       

      

    
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The tracker resource receiving the request for the device position history.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DevicePositions': [
                {
                    'DeviceId': 'string',
                    'Position': [
                        123.0,
                    ],
                    'ReceivedTime': datetime(2015, 1, 1),
                    'SampleTime': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DevicePositions** *(list) --* 

          Contains the position history details for the requested device.

          
          

          - *(dict) --* 

            Contains the device position details.

            
            

            - **DeviceId** *(string) --* 

              The device whose position you retrieved.

              
            

            - **Position** *(list) --* 

              The last known device position.

              
              

              - *(float) --* 
          
            

            - **ReceivedTime** *(datetime) --* 

              The timestamp for when the tracker resource received the device position in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
            

            - **SampleTime** *(datetime) --* 

              The timestamp at which the device's position was determined. Uses `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
        
      
    

.. py:class:: LocationService.Paginator.ListGeofenceCollections

  ::

    
    paginator = client.get_paginator('list_geofence_collections')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LocationService.Client.list_geofence_collections`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListGeofenceCollections>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Entries': [
                {
                    'CollectionName': 'string',
                    'CreateTime': datetime(2015, 1, 1),
                    'Description': 'string',
                    'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
                    'PricingPlanDataSource': 'string',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Entries** *(list) --* 

          Lists the geofence collections that exist in your AWS account.

          
          

          - *(dict) --* 

            Contains the geofence collection details.

            
            

            - **CollectionName** *(string) --* 

              The name of the geofence collection.

              
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the geofence collection was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
            

            - **Description** *(string) --* 

              The description for the geofence collection

              
            

            - **PricingPlan** *(string) --* 

              The pricing plan for the specified geofence collection.

               

              For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

              
            

            - **PricingPlanDataSource** *(string) --* 

              The data source selected for the geofence collection and associated pricing plan.

              
            

            - **UpdateTime** *(datetime) --* 

              Specifies a timestamp for when the resource was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
        
      
    

.. py:class:: LocationService.Paginator.ListGeofences

  ::

    
    paginator = client.get_paginator('list_geofences')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LocationService.Client.list_geofences`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListGeofences>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          CollectionName='string',
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type CollectionName: string
    :param CollectionName: **[REQUIRED]** 

      The name of the geofence collection storing the list of geofences.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Entries': [
                {
                    'CreateTime': datetime(2015, 1, 1),
                    'GeofenceId': 'string',
                    'Geometry': {
                        'Polygon': [
                            [
                                [
                                    123.0,
                                ],
                            ],
                        ]
                    },
                    'Status': 'string',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Entries** *(list) --* 

          Contains a list of geofences stored in the geofence collection.

          
          

          - *(dict) --* 

            Contains a list of geofences stored in a given geofence collection.

            
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the geofence was stored in a geofence collection in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
            

            - **GeofenceId** *(string) --* 

              The geofence identifier.

              
            

            - **Geometry** *(dict) --* 

              Contains the geofence geometry details describing a polygon.

              
              

              - **Polygon** *(list) --* 

                An array of 1 or more linear rings. A linear ring is an array of 4 or more vertices, where the first and last vertex are the same to form a closed boundary. Each vertex is a 2-dimensional point of the form: ``[longitude, latitude]`` . 

                 

                The first linear ring is an outer ring, describing the polygon's boundary. Subsequent linear rings may be inner or outer rings to describe holes and islands. Outer rings must list their vertices in counter-clockwise order around the ring's center, where the left side is the polygon's exterior. Inner rings must list their vertices in clockwise order, where the left side is the polygon's interior.

                
                

                - *(list) --* 
                  

                  - *(list) --* 
                    

                    - *(float) --* 
                
              
            
          
            

            - **Status** *(string) --* 

              Identifies the state of the geofence. A geofence will hold one of the following states:

               

               
              * ``ACTIVE`` — The geofence has been indexed by the system.  
               
              * ``PENDING`` — The geofence is being processed by the system. 
               
              * ``FAILED`` — The geofence failed to be indexed by the system. 
               
              * ``DELETED`` — The geofence has been deleted from the system index. 
               
              * ``DELETING`` — The geofence is being deleted from the system index. 
               

              
            

            - **UpdateTime** *(datetime) --* 

              The timestamp for when the geofence was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ``  

              
        
      
    

.. py:class:: LocationService.Paginator.ListMaps

  ::

    
    paginator = client.get_paginator('list_maps')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LocationService.Client.list_maps`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListMaps>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Entries': [
                {
                    'CreateTime': datetime(2015, 1, 1),
                    'DataSource': 'string',
                    'Description': 'string',
                    'MapName': 'string',
                    'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Entries** *(list) --* 

          Contains a list of maps in your AWS account

          
          

          - *(dict) --* 

            Contains details of an existing map resource in your AWS account.

            
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the map resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` .

              
            

            - **DataSource** *(string) --* 

              Specifies the data provider for the associated map tiles.

              
            

            - **Description** *(string) --* 

              The description for the map resource.

              
            

            - **MapName** *(string) --* 

              The name of the associated map resource.

              
            

            - **PricingPlan** *(string) --* 

              The pricing plan for the specified map resource.

               

              For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

              
            

            - **UpdateTime** *(datetime) --* 

              The timestamp for when the map resource was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` .

              
        
      
    

.. py:class:: LocationService.Paginator.ListPlaceIndexes

  ::

    
    paginator = client.get_paginator('list_place_indexes')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LocationService.Client.list_place_indexes`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListPlaceIndexes>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Entries': [
                {
                    'CreateTime': datetime(2015, 1, 1),
                    'DataSource': 'string',
                    'Description': 'string',
                    'IndexName': 'string',
                    'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Entries** *(list) --* 

          Lists the Place index resources that exist in your AWS account

          
          

          - *(dict) --* 

            A Place index resource listed in your AWS account.

            
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the Place index resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
            

            - **DataSource** *(string) --* 

              The data provider of geospatial data. Indicates one of the available providers:

               

               
              * Esri 
               
              * HERE 
               

               

              For additional details on data providers, see the `Amazon Location Service data providers page <https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html>`__ .

              
            

            - **Description** *(string) --* 

              The optional description for the Place index resource.

              
            

            - **IndexName** *(string) --* 

              The name of the Place index resource.

              
            

            - **PricingPlan** *(string) --* 

              The pricing plan for the specified Place index resource.

               

              For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

              
            

            - **UpdateTime** *(datetime) --* 

              The timestamp for when the Place index resource was last updated in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
        
      
    

.. py:class:: LocationService.Paginator.ListTrackerConsumers

  ::

    
    paginator = client.get_paginator('list_tracker_consumers')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LocationService.Client.list_tracker_consumers`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListTrackerConsumers>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          TrackerName='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type TrackerName: string
    :param TrackerName: **[REQUIRED]** 

      The tracker resource whose associated geofence collections you want to list.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ConsumerArns': [
                'string',
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ConsumerArns** *(list) --* 

          Contains the list of geofence collection ARNs associated to the tracker resource.

          
          

          - *(string) --* 
      
    

.. py:class:: LocationService.Paginator.ListTrackers

  ::

    
    paginator = client.get_paginator('list_trackers')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LocationService.Client.list_trackers`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/location-2020-11-19/ListTrackers>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Entries': [
                {
                    'CreateTime': datetime(2015, 1, 1),
                    'Description': 'string',
                    'PricingPlan': 'RequestBasedUsage'|'MobileAssetTracking'|'MobileAssetManagement',
                    'PricingPlanDataSource': 'string',
                    'TrackerName': 'string',
                    'UpdateTime': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Entries** *(list) --* 

          Contains tracker resources in your AWS account. Details include tracker name, description and timestamps for when the tracker was created and last updated.

          
          

          - *(dict) --* 

            Contains the tracker resource details.

            
            

            - **CreateTime** *(datetime) --* 

              The timestamp for when the tracker resource was created in `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
            

            - **Description** *(string) --* 

              The description for the tracker resource.

              
            

            - **PricingPlan** *(string) --* 

              The pricing plan for the specified tracker resource.

               

              For additional details and restrictions on each pricing plan option, see the `Amazon Location Service pricing page <https://aws.amazon.com/location/pricing/>`__ .

              
            

            - **PricingPlanDataSource** *(string) --* 

              The data source selected for the tracker resource and associated pricing plan.

              
            

            - **TrackerName** *(string) --* 

              The name of the tracker resource.

              
            

            - **UpdateTime** *(datetime) --* 

              The timestamp at which the device's position was determined. Uses `ISO 8601 <https://www.iso.org/iso-8601-date-and-time-format.html>`__ format: ``YYYY-MM-DDThh:mm:ss.sssZ`` . 

              
        
      
    